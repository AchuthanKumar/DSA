package com.data.structures.examples.Algorithms.Graphs;

import com.data.structures.examples.Algorithms.Graphs.BFS.CloneGraph;
import com.data.structures.examples.Algorithms.Graphs.BFS.Node;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

//Test Cases generated by AI

@SpringBootTest
public class CloneGraphTest {
    @Autowired
    CloneGraph cloneGraph;

    private Node buildGraphFromAdjList(List<List<Integer>> adjList) {
        if (adjList.isEmpty()) return null;

        Map<Integer, Node> map = new HashMap<>();
        for (int i = 1; i <= adjList.size(); i++) {
            map.put(i, new Node(i));
        }

        for (int i = 1; i <= adjList.size(); i++) {
            Node node = map.get(i);
            for (int neighborVal : adjList.get(i - 1)) {
                node.neighbors.add(map.get(neighborVal));
            }
        }

        return map.get(1); // Return node with val = 1
    }

    private List<List<Integer>> getAdjList(Node start) {
        if (start == null) return List.of();

        Map<Integer, List<Integer>> graphMap = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        Queue<Node> queue = new LinkedList<>();

        queue.offer(start);
        visited.add(start.val);

        while (!queue.isEmpty()) {
            Node curr = queue.poll();
            List<Integer> neighbors = new ArrayList<>();
            for (Node neighbor : curr.neighbors) {
                neighbors.add(neighbor.val);
                if (visited.add(neighbor.val)) {
                    queue.offer(neighbor);
                }
            }
            Collections.sort(neighbors); // for consistency
            graphMap.put(curr.val, neighbors);
        }

        // Convert to ordered adjacency list (1-indexed)
        int n = graphMap.keySet().stream().max(Integer::compareTo).orElse(0);
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            adjList.add(graphMap.getOrDefault(i, new ArrayList<>()));
        }

        return adjList;
    }

    private void normalize(List<List<Integer>> list) {
        for (List<Integer> neighbors : list) {
            Collections.sort(neighbors);
        }
    }


    @Test
    void testCloneGraph_ExampleCase() {
        List<List<Integer>> inputAdjList = List.of(
                List.of(2, 4),
                List.of(1, 3),
                List.of(2, 4),
                List.of(1, 3)
        );
        Node original = buildGraphFromAdjList(inputAdjList);
        Node cloned = cloneGraph.cloneGraph(original);

        List<List<Integer>> actual = getAdjList(cloned);
        List<List<Integer>> expected = new ArrayList<>();
        for (List<Integer> list : inputAdjList) {
            expected.add(new ArrayList<>(list));
        }

        normalize(expected);
        normalize(actual);

        assertEquals(expected, actual);
    }

    @Test
    void testCloneGraph_SingleNodeNoNeighbors() {
        Node original = buildGraphFromAdjList(List.of(List.of()));

        Node cloned = cloneGraph.cloneGraph(original);
        List<List<Integer>> clonedAdjList = getAdjList(cloned);

        assertEquals(List.of(List.of()), clonedAdjList);
    }

    @Test
    void testCloneGraph_EmptyGraph() {
        Node cloned = cloneGraph.cloneGraph(null);
        assertNull(cloned);
    }
}
